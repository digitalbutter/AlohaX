<?xml version='1.0'?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN" "http://www.oasis-open.org/docbook/xml/4.3b2/docbookx.dtd">
<refentry id="{@id}">
    <refnamediv>
        <refname>Key Concepts</refname>
        <refpurpose>Architectural and conceptual considerations.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <authorblurb>
            <para>{@link mailto:jason@opengeek.com Jason Coward}</para>
        </authorblurb>
    </refsynopsisdiv>
    {@toc}
    <refsect1 id="{@id xpdo-core}">
        <title>The xPDO Core</title>
        <para>
            Becoming familiar with xPDO is essential to understanding MODx Revolution. It represents a
            complete rewrite of MODx functionality in an object-oriented paradigm, to both increase
            the agility and adaptability of the core, and xPDO is the foundation. The new {@link modX}
            class directly extends the {@link xPDO} class, adopting and extending it's features from
            this solid foundation.
        </para>
    </refsect1>
    <refsect1 id="{@id web-resources}">
        <title>Web Resources</title>
        <para>
            Before the Revolution release, Documents and WebLinks defined these pieces of the MODx
            paradigm. This has been changed to better reflect the fact that these page controllers
            can provide responses to any request that can be made via a Universal Resource Locator
            (URL).
        </para>
        <para>
            Resources could include HTML page requests, file downloads of any type, redirect links,
            forwarding (or symbolic) links, Ajax requests, XMLRPC requests, or any other imaginable
            request. They can also represent special processing for requests to more structured
            resources, e.g. forum posts, comments, or other specialized resource types. These can
            easily be implemented as MODx core extensions.
        </para>
    </refsect1>
    <refsect1 id="{@id content-elements}">
        <title>Content Elements</title>
        <para>
            Templates, Template Variables, Chunks, Snippets, Plugins, and Modules; these are the
            building blocks that make MODx what it is. With the new object-oriented approach, all
            of these elements are derived from a common ancestor, {@link modElement}.
        </para>
    </refsect1>
    <refsect1 id="{@id content-tags}">
        <title>Content Tags</title>
        <para>
            The simple, no-nonsense templating capabilities that are making MODx so popular, have
            been refined in the new architecture to allow even more extensibility via the {@link
            modElement} and {@link modTag} classes, a completely new {@link modParser parser} featuring
            true source-order execution and fully-recursive nested tag support.
        </para>
        <para>
            One significant change from previous versions of MODx, is the new unified tag format. All
            MODx tags are identified using the prefix [[ and suffix ]]. There is no need to remember
            a different prefix and suffix for each type of tag; instead a single token after the prefix
            identifies what kind of tag is to be processed, and optionally control cacheability like
            you could only with snippets previously. 
        </para>
    </refsect1>
</refentry>
